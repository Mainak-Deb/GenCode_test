def is_safe(board, row, col, N):
    # Check if there is a queen in the same column upwards
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, row, N):
    if row == N:
        # Base case: All queens are placed successfully
        return True

    for col in range(N):
        if is_safe(board, row, col, N):
            board[row][col] = 1  # Place the queen

            # Recur to place the rest of the queens
            if solve_n_queens_util(board, row + 1, N):
                return True

            # If placing queen in board[row][col] doesn't lead to a solution, backtrack
            board[row][col] = 0

    return False  # If queen cannot be placed in any column in this row

def solve_n_queens(N):
    board = [[0 for _ in range(N)] for _ in range(N)]

    if not solve_n_queens_util(board, 0, N):
        print("Solution does not exist")
        return False

    # Print the solution
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=" ")
        print()
    return True

# Change N to solve for different board sizes
N = 8
solve_n_queens(N)
